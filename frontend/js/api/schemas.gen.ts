// This file is auto-generated by @hey-api/openapi-ts

export const $APIKey = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    name: {
      type: "string",
      description: "Key is used for authentication of public API",
      maxLength: 255,
    },
    key: {
      type: "string",
      maxLength: 64,
    },
    is_active: {
      type: "boolean",
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    last_used: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
  required: ["created_at", "id", "key", "name"],
} as const;

export const $AdminInvite = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    token: {
      type: "string",
      format: "uuid",
      readOnly: true,
    },
    is_active: {
      type: "boolean",
    },
    invited_by: {
      type: "integer",
      readOnly: true,
    },
    invited_by_email: {
      type: "string",
      readOnly: true,
    },
    used_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    used_by: {
      type: "integer",
      readOnly: true,
      nullable: true,
    },
    used_by_email: {
      type: "string",
      readOnly: true,
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
  required: [
    "created",
    "email",
    "id",
    "invited_by",
    "invited_by_email",
    "modified",
    "token",
    "used_at",
    "used_by",
    "used_by_email",
  ],
} as const;

export const $AnswerCategoryMapping = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    questionnaire_id: {
      type: "integer",
    },
    answer_id: {
      type: "integer",
    },
    category_id: {
      type: "integer",
    },
    inclusive: {
      type: "boolean",
    },
  },
  required: ["answer_id", "category_id", "id", "questionnaire_id"],
} as const;

export const $CreateAnswerCategoryMappingRequest = {
  type: "object",
  properties: {
    questionnaire_id: {
      type: "integer",
    },
    answer_id: {
      type: "integer",
    },
    category_id: {
      type: "integer",
    },
    inclusive: {
      type: "boolean",
      default: true,
    },
  },
  required: ["answer_id", "category_id", "questionnaire_id"],
} as const;

export const $CreateInvite = {
  type: "object",
  properties: {
    email: {
      type: "string",
      format: "email",
    },
  },
  required: ["email"],
} as const;

export const $CreateQuestionRequest = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      default: 0,
    },
    text: {
      type: "string",
    },
    type: {
      type: "string",
    },
    answers: {
      type: "array",
      items: {
        type: "object",
        additionalProperties: {
          type: "string",
        },
      },
    },
  },
  required: ["answers", "text", "type"],
} as const;

export const $CreateQuestionnaireRequest = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      default: 0,
    },
    title: {
      type: "string",
    },
    status: {
      type: "string",
    },
    questions: {
      type: "array",
      items: {
        type: "integer",
      },
    },
  },
  required: ["questions", "status", "title"],
} as const;

export const $CreateVideo = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      default: 0,
    },
    title: {
      type: "string",
    },
    duration: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
      format: "uri",
    },
    categories: {
      type: "array",
      items: {
        type: "object",
        additionalProperties: {
          type: "string",
        },
      },
    },
  },
  required: ["categories", "description", "duration", "title"],
} as const;

export const $GetVideoWithCategories = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    title: {
      type: "string",
      maxLength: 255,
    },
    duration: {
      type: "string",
      maxLength: 255,
    },
    description: {
      type: "string",
      maxLength: 255,
    },
    url: {
      type: "string",
      format: "uri",
      nullable: true,
      maxLength: 500,
    },
    categories: {
      type: "string",
      readOnly: true,
    },
  },
  required: ["categories", "description", "duration", "id", "title"],
} as const;

export const $GetVideosForPreview = {
  type: "object",
  properties: {
    questionnaire_id: {
      type: "integer",
    },
    answer_ids: {
      type: "array",
      items: {
        type: "integer",
      },
    },
  },
  required: ["answer_ids", "questionnaire_id"],
} as const;

export const $Login = {
  type: "object",
  properties: {
    email: {
      type: "string",
      format: "email",
    },
    password: {
      type: "string",
      writeOnly: true,
    },
  },
  required: ["email", "password"],
} as const;

export const $Logout = {
  type: "object",
  properties: {
    detail: {
      type: "string",
      readOnly: true,
    },
  },
  required: ["detail"],
} as const;

export const $Message = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
  },
  required: ["message"],
} as const;

export const $PaginatedAdminInviteList = {
  type: "object",
  required: ["count", "results"],
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=400&limit=100",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=200&limit=100",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AdminInvite",
      },
    },
  },
} as const;

export const $PaginatedUserList = {
  type: "object",
  required: ["count", "results"],
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=400&limit=100",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=200&limit=100",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/User",
      },
    },
  },
} as const;

export const $PatchedAPIKey = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    name: {
      type: "string",
      description: "Key is used for authentication of public API",
      maxLength: 255,
    },
    key: {
      type: "string",
      maxLength: 64,
    },
    is_active: {
      type: "boolean",
    },
    created_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    last_used: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
} as const;

export const $PatchedAdminInvite = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    token: {
      type: "string",
      format: "uuid",
      readOnly: true,
    },
    is_active: {
      type: "boolean",
    },
    invited_by: {
      type: "integer",
      readOnly: true,
    },
    invited_by_email: {
      type: "string",
      readOnly: true,
    },
    used_at: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    used_by: {
      type: "integer",
      readOnly: true,
      nullable: true,
    },
    used_by_email: {
      type: "string",
      readOnly: true,
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const $PatchedUser = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    is_active: {
      type: "boolean",
      description:
        "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
    },
    is_staff: {
      type: "boolean",
      description: "Designates whether the user can log into this admin site.",
    },
    is_superuser: {
      type: "boolean",
      title: "Superuser status",
      description:
        "Designates that this user has all permissions without explicitly assigning them.",
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    last_login: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
} as const;

export const $PublicQuestionnaire = {
  type: "object",
  properties: {
    title: {
      type: "string",
      maxLength: 255,
    },
    questions: {
      type: "string",
      readOnly: true,
    },
  },
  required: ["questions", "title"],
} as const;

export const $Question = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    text: {
      type: "string",
      maxLength: 255,
    },
    type: {
      type: "string",
      maxLength: 255,
    },
    answers: {
      type: "string",
      readOnly: true,
    },
  },
  required: ["answers", "id", "text"],
} as const;

export const $Register = {
  type: "object",
  properties: {
    token: {
      type: "string",
      format: "uuid",
    },
    password: {
      type: "string",
      writeOnly: true,
      minLength: 8,
    },
    password_confirm: {
      type: "string",
      writeOnly: true,
    },
  },
  required: ["password", "password_confirm", "token"],
} as const;

export const $User = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    is_active: {
      type: "boolean",
      description:
        "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
    },
    is_staff: {
      type: "boolean",
      description: "Designates whether the user can log into this admin site.",
    },
    is_superuser: {
      type: "boolean",
      title: "Superuser status",
      description:
        "Designates that this user has all permissions without explicitly assigning them.",
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    last_login: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
  required: ["created", "email", "id", "modified"],
} as const;

export const $VerifyToken = {
  type: "object",
  properties: {
    token: {
      type: "string",
      format: "uuid",
    },
  },
  required: ["token"],
} as const;

export const $VideoResponse = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    title: {
      type: "string",
    },
    duration: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
      nullable: true,
    },
    count: {
      type: "integer",
    },
  },
  required: ["count", "description", "duration", "id", "title", "url"],
} as const;

export const $VideoSearch = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    duration: {
      type: "string",
    },
    category: {
      type: "string",
    },
  },
} as const;
