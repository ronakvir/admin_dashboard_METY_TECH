// This file is auto-generated by @hey-api/openapi-ts




export interface ExerciseSegment {
  exercise: string;
  intervals: number;
  notes: string;
}

export interface ActivityBlock {
  activity: string;
  duration_minutes: number;
  sets?: number; // optional
  segments: ExerciseSegment[];
}

export interface Workout {
  title: string;
  segments: ActivityBlock[];
  total_duration: number;
  difficulty: string;
  goal: string;
}



export type APIKey = {
  readonly id: number;
  /**
   * Key is used for authentication of public API
   */
  name: string;
  key: string;
  is_active?: boolean;
  readonly created_at: string;
  last_used?: string | null;
};

export type AdminInvite = {
  readonly id: number;
  email: string;
  readonly token: string;
  is_active?: boolean;
  readonly invited_by: number;
  readonly invited_by_email: string;
  readonly used_at: string | null;
  readonly used_by: number | null;
  readonly used_by_email: string;
  readonly created: string;
  readonly modified: string;
};

export type AnswerCategoryMapping = {
  readonly id: number;
  questionnaire_id: number;
  answer_id: number;
  category_id: number;
  inclusive?: boolean;
};

export type CreateAnswerCategoryMappingRequest = {
  questionnaire_id: number;
  answer_id: number;
  category_id: number;
  inclusive?: boolean;
};

export type CreateInvite = {
  email: string;
};

export type CreateQuestionRequest = {
  id?: number;
  text: string;
  type: string;
  answers: Array<{
    [key: string]: string;
  }>;
};

export type CreateQuestionnaireRequest = {
  id?: number;
  title: string;
  status: string;
  questions: Array<number>;
};

export type CreateVideo = {
  id?: number;
  title: string;
  duration: string;
  description: string;
  url?: string;
  categories: Array<{
    [key: string]: string;
  }>;
};

export type GetVideoWithCategories = {
  readonly id: number;
  title: string;
  duration: string;
  description: string;
  url?: string | null;
  readonly categories: string;
};

export type GetVideosForPreview = {
  questionnaire_id: number;
  answer_ids: Array<number>;
};

export type Login = {
  email: string;
  password: string;
};

export type Logout = {
  readonly detail: string;
};

export type Message = {
  message: string;
};

export type PaginatedAdminInviteList = {
  count: number;
  next?: string | null;
  previous?: string | null;
  results: Array<AdminInvite>;
};

export type PaginatedUserList = {
  count: number;
  next?: string | null;
  previous?: string | null;
  results: Array<User>;
};

export type PatchedAPIKey = {
  readonly id?: number;
  /**
   * Key is used for authentication of public API
   */
  name?: string;
  key?: string;
  is_active?: boolean;
  readonly created_at?: string;
  last_used?: string | null;
};

export type PatchedAdminInvite = {
  readonly id?: number;
  email?: string;
  readonly token?: string;
  is_active?: boolean;
  readonly invited_by?: number;
  readonly invited_by_email?: string;
  readonly used_at?: string | null;
  readonly used_by?: number | null;
  readonly used_by_email?: string;
  readonly created?: string;
  readonly modified?: string;
};

export type PatchedUser = {
  readonly id?: number;
  email?: string;
  /**
   * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
   */
  is_active?: boolean;
  /**
   * Designates whether the user can log into this admin site.
   */
  is_staff?: boolean;
  /**
   * Designates that this user has all permissions without explicitly assigning them.
   */
  is_superuser?: boolean;
  readonly created?: string;
  readonly modified?: string;
  last_login?: string | null;
};

export type PublicQuestionnaire = {
  title: string;
  readonly questions: string;
};

export type Question = {
  readonly id: number;
  text: string;
  type?: string;
  readonly answers: string;
};

export type Register = {
  token: string;
  password: string;
  password_confirm: string;
};

export type User = {
  readonly id: number;
  email: string;
  /**
   * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
   */
  is_active?: boolean;
  /**
   * Designates whether the user can log into this admin site.
   */
  is_staff?: boolean;
  /**
   * Designates that this user has all permissions without explicitly assigning them.
   */
  is_superuser?: boolean;
  readonly created: string;
  readonly modified: string;
  last_login?: string | null;
};

export type VerifyToken = {
  token: string;
};

export type VideoResponse = {
  id: number;
  title: string;
  duration: string;
  description: string;
  url: string | null;
  count: number;
};

export type VideoSearch = {
  title?: string;
  duration?: string;
  category?: string;
};

export type AdminInvitesListData = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
};

export type AdminInvitesListResponse = PaginatedAdminInviteList;

export type AdminInvitesCreateData = {
  requestBody: AdminInvite;
};

export type AdminInvitesCreateResponse = AdminInvite;

export type AdminInvitesRetrieveData = {
  /**
   * A unique integer value identifying this admin invite.
   */
  id: number;
};

export type AdminInvitesRetrieveResponse = AdminInvite;

export type AdminInvitesUpdateData = {
  /**
   * A unique integer value identifying this admin invite.
   */
  id: number;
  requestBody: AdminInvite;
};

export type AdminInvitesUpdateResponse = AdminInvite;

export type AdminInvitesPartialUpdateData = {
  /**
   * A unique integer value identifying this admin invite.
   */
  id: number;
  requestBody?: PatchedAdminInvite;
};

export type AdminInvitesPartialUpdateResponse = AdminInvite;

export type AdminInvitesDestroyData = {
  /**
   * A unique integer value identifying this admin invite.
   */
  id: number;
};

export type AdminInvitesDestroyResponse = void;

export type AdminInvitesCreateCreateData = {
  requestBody: CreateInvite;
};

export type AdminInvitesCreateCreateResponse = CreateInvite;

export type AdminInvitesVerifyTokenCreateData = {
  requestBody: VerifyToken;
};

export type AdminInvitesVerifyTokenCreateResponse = VerifyToken;

export type AdminManagementRetrieveResponse = User;

export type AdminManagementPartialUpdateData = {
  requestBody?: PatchedUser;
};

export type AdminManagementPartialUpdateResponse = User;

export type ApiLogoutCreateData = {
  requestBody?: Logout;
};

export type ApiLogoutCreateResponse = Logout;

export type ApikeysRetrieveResponse = APIKey;

export type ApikeysCreateData = {
  requestBody: APIKey;
};

export type ApikeysCreateResponse = APIKey;

export type ApikeysPartialUpdateData = {
  requestBody?: PatchedAPIKey;
};

export type ApikeysPartialUpdateResponse = APIKey;

export type ApikeysDestroyResponse = void;

export type ApikeysRetrieve2Data = {
  keyId: number;
};

export type ApikeysRetrieve2Response = APIKey;

export type ApikeysCreate2Data = {
  keyId: number;
  requestBody: APIKey;
};

export type ApikeysCreate2Response = APIKey;

export type ApikeysPartialUpdate2Data = {
  keyId: number;
  requestBody?: PatchedAPIKey;
};

export type ApikeysPartialUpdate2Response = APIKey;

export type ApikeysDestroy2Data = {
  keyId: number;
};

export type ApikeysDestroy2Response = void;

export type CurrentUserRetrieveResponse = User;

export type LogicbuilderAddmappingCreateData = {
  requestBody: CreateAnswerCategoryMappingRequest;
};

export type LogicbuilderAddmappingCreateResponse = AnswerCategoryMapping;

export type LogicbuilderDeletemappingDestroyData = {
  answerId: number;
  questionnaireId: number;
};

export type LogicbuilderDeletemappingDestroyResponse = void;

export type LogicbuilderGetcategoriesRetrieveResponse = unknown;

export type LogicbuilderGetquestionnairesRetrieveResponse = unknown;

export type LogicbuilderGetquestionsRetrieveData = {
  questionnaireId: number;
};

export type LogicbuilderGetquestionsRetrieveResponse = unknown;

export type PublicQuestionnaireRetrieveResponse = PublicQuestionnaire;

export type QuestionnairebuilderAddquestionCreateData = {
  requestBody: CreateQuestionRequest;
};

export type QuestionnairebuilderAddquestionCreateResponse = Question;

export type QuestionnairebuilderCreatequestionnaireCreateData = {
  requestBody: CreateQuestionnaireRequest;
};

export type QuestionnairebuilderCreatequestionnaireCreateResponse = {
  id?: number;
};

export type QuestionnairebuilderDeletequestionDestroyData = {
  id: number;
};

export type QuestionnairebuilderDeletequestionDestroyResponse = void;

export type QuestionnairebuilderDeletequestionnaireDestroyData = {
  id: number;
};

export type QuestionnairebuilderDeletequestionnaireDestroyResponse = void;

export type QuestionnairebuilderGetquestionnairesRetrieveResponse = unknown;

export type QuestionnairebuilderGetquestionsRetrieveResponse = unknown;

export type QuestionnairebuilderGetvideosCreateData = {
  requestBody: GetVideosForPreview;
};

export type QuestionnairebuilderGetvideosCreateResponse = Array<VideoResponse>;

export type ResetalldataCreateResponse = unknown;

export type RestRestCheckRetrieveResponse = Message;

export type SeeddataCreateResponse = unknown;

export type UsersListData = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
};

export type UsersListResponse = PaginatedUserList;

export type UsersCreateData = {
  requestBody: User;
};

export type UsersCreateResponse = User;

export type UsersRetrieveData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
};

export type UsersRetrieveResponse = User;

export type UsersUpdateData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  requestBody: User;
};

export type UsersUpdateResponse = User;

export type UsersPartialUpdateData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  requestBody?: PatchedUser;
};

export type UsersPartialUpdateResponse = User;

export type UsersDestroyData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
};

export type UsersDestroyResponse = void;

export type UsersLoginCreateData = {
  requestBody: Login;
};

export type UsersLoginCreateResponse = Login;

export type UsersRegisterCreateData = {
  requestBody: Register;
};

export type UsersRegisterCreateResponse = Register;

export type VideomanagementCreatevideoCreateData = {
  requestBody: CreateVideo;
};

export type VideomanagementCreatevideoCreateResponse = {
  id?: number;
};

export type VideomanagementDeletevideoDestroyData = {
  id: number;
};

export type VideomanagementDeletevideoDestroyResponse = void;

export type VideomanagementGetvideosCreateData = {
  requestBody?: VideoSearch;
};

export type VideomanagementGetvideosCreateResponse =
  Array<GetVideoWithCategories>;

export type $OpenApiTs = {
  "/api/admin-invites/": {
    get: {
      req: AdminInvitesListData;
      res: {
        200: PaginatedAdminInviteList;
      };
    };
    post: {
      req: AdminInvitesCreateData;
      res: {
        201: AdminInvite;
      };
    };
  };
  "/api/admin-invites/{id}/": {
    get: {
      req: AdminInvitesRetrieveData;
      res: {
        200: AdminInvite;
      };
    };
    put: {
      req: AdminInvitesUpdateData;
      res: {
        200: AdminInvite;
      };
    };
    patch: {
      req: AdminInvitesPartialUpdateData;
      res: {
        200: AdminInvite;
      };
    };
    delete: {
      req: AdminInvitesDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/admin-invites/create/": {
    post: {
      req: AdminInvitesCreateCreateData;
      res: {
        200: CreateInvite;
      };
    };
  };
  "/api/admin-invites/verify-token/": {
    post: {
      req: AdminInvitesVerifyTokenCreateData;
      res: {
        200: VerifyToken;
      };
    };
  };
  "/api/admin-management/": {
    get: {
      res: {
        200: User;
      };
    };
    patch: {
      req: AdminManagementPartialUpdateData;
      res: {
        200: User;
      };
    };
  };
  "/api/api/logout/": {
    post: {
      req: ApiLogoutCreateData;
      res: {
        200: Logout;
      };
    };
  };
  "/api/apikeys/": {
    get: {
      res: {
        200: APIKey;
      };
    };
    post: {
      req: ApikeysCreateData;
      res: {
        200: APIKey;
      };
    };
    patch: {
      req: ApikeysPartialUpdateData;
      res: {
        200: APIKey;
      };
    };
    delete: {
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/apikeys/{key_id}/": {
    get: {
      req: ApikeysRetrieve2Data;
      res: {
        200: APIKey;
      };
    };
    post: {
      req: ApikeysCreate2Data;
      res: {
        200: APIKey;
      };
    };
    patch: {
      req: ApikeysPartialUpdate2Data;
      res: {
        200: APIKey;
      };
    };
    delete: {
      req: ApikeysDestroy2Data;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/current-user/": {
    get: {
      res: {
        200: User;
      };
    };
  };
  "/api/logicbuilder/addmapping/": {
    post: {
      req: LogicbuilderAddmappingCreateData;
      res: {
        201: AnswerCategoryMapping;
      };
    };
  };
  "/api/logicbuilder/deletemapping/{questionnaire_id}/{answer_id}": {
    delete: {
      req: LogicbuilderDeletemappingDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/logicbuilder/getcategories/": {
    get: {
      res: {
        /**
         * No response body
         */
        200: unknown;
      };
    };
  };
  "/api/logicbuilder/getquestionnaires/": {
    get: {
      res: {
        /**
         * No response body
         */
        200: unknown;
      };
    };
  };
  "/api/logicbuilder/getquestions/{questionnaire_id}": {
    get: {
      req: LogicbuilderGetquestionsRetrieveData;
      res: {
        /**
         * No response body
         */
        200: unknown;
      };
    };
  };
  "/api/public/questionnaire/": {
    get: {
      res: {
        200: PublicQuestionnaire;
      };
    };
  };
  "/api/questionnairebuilder/addquestion/": {
    post: {
      req: QuestionnairebuilderAddquestionCreateData;
      res: {
        200: Question;
      };
    };
  };
  "/api/questionnairebuilder/createquestionnaire/": {
    post: {
      req: QuestionnairebuilderCreatequestionnaireCreateData;
      res: {
        200: {
          id?: number;
        };
      };
    };
  };
  "/api/questionnairebuilder/deletequestion/{id}": {
    delete: {
      req: QuestionnairebuilderDeletequestionDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/questionnairebuilder/deletequestionnaire/{id}": {
    delete: {
      req: QuestionnairebuilderDeletequestionnaireDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/questionnairebuilder/getquestionnaires/": {
    get: {
      res: {
        /**
         * No response body
         */
        200: unknown;
      };
    };
  };
  "/api/questionnairebuilder/getquestions/": {
    get: {
      res: {
        /**
         * No response body
         */
        200: unknown;
      };
    };
  };
  "/api/questionnairebuilder/getvideos/": {
    post: {
      req: QuestionnairebuilderGetvideosCreateData;
      res: {
        200: Array<VideoResponse>;
      };
    };
  };
  "/api/resetalldata/": {
    post: {
      res: {
        /**
         * No response body
         */
        200: unknown;
      };
    };
  };
  "/api/rest/rest-check/": {
    get: {
      res: {
        200: Message;
      };
    };
  };
  "/api/seeddata/": {
    post: {
      res: {
        /**
         * No response body
         */
        200: unknown;
      };
    };
  };
  "/api/users/": {
    get: {
      req: UsersListData;
      res: {
        200: PaginatedUserList;
      };
    };
    post: {
      req: UsersCreateData;
      res: {
        201: User;
      };
    };
  };
  "/api/users/{id}/": {
    get: {
      req: UsersRetrieveData;
      res: {
        200: User;
      };
    };
    put: {
      req: UsersUpdateData;
      res: {
        200: User;
      };
    };
    patch: {
      req: UsersPartialUpdateData;
      res: {
        200: User;
      };
    };
    delete: {
      req: UsersDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/users/login/": {
    post: {
      req: UsersLoginCreateData;
      res: {
        200: Login;
      };
    };
  };
  "/api/users/register/": {
    post: {
      req: UsersRegisterCreateData;
      res: {
        200: Register;
      };
    };
  };
  "/api/videomanagement/createvideo/": {
    post: {
      req: VideomanagementCreatevideoCreateData;
      res: {
        201: {
          id?: number;
        };
      };
    };
  };
  "/api/videomanagement/deletevideo/{id}": {
    delete: {
      req: VideomanagementDeletevideoDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/videomanagement/getvideos/": {
    post: {
      req: VideomanagementGetvideosCreateData;
      res: {
        200: Array<GetVideoWithCategories>;
      };
    };
  };
};
