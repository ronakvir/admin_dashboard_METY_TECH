// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  ApiLogoutCreateData,
  ApiLogoutCreateResponse,
  ApikeysRetrieveResponse,
  ApikeysCreateData,
  ApikeysCreateResponse,
  ApikeysPartialUpdateData,
  ApikeysPartialUpdateResponse,
  ApikeysDestroyResponse,
  ApikeysRetrieve2Data,
  ApikeysRetrieve2Response,
  ApikeysCreate2Data,
  ApikeysCreate2Response,
  ApikeysPartialUpdate2Data,
  ApikeysPartialUpdate2Response,
  ApikeysDestroy2Data,
  ApikeysDestroy2Response,
  LogicbuilderAddmappingCreateData,
  LogicbuilderAddmappingCreateResponse,
  LogicbuilderDeletemappingDestroyData,
  LogicbuilderDeletemappingDestroyResponse,
  LogicbuilderGetcategoriesRetrieveResponse,
  LogicbuilderGetquestionnairesRetrieveResponse,
  LogicbuilderGetquestionsRetrieveData,
  LogicbuilderGetquestionsRetrieveResponse,
  PublicQuestionnaireRetrieveResponse,
  QuestionnairebuilderAddquestionCreateData,
  QuestionnairebuilderAddquestionCreateResponse,
  QuestionnairebuilderCreatequestionnaireCreateData,
  QuestionnairebuilderCreatequestionnaireCreateResponse,
  QuestionnairebuilderDeletequestionDestroyData,
  QuestionnairebuilderDeletequestionDestroyResponse,
  QuestionnairebuilderDeletequestionnaireDestroyData,
  QuestionnairebuilderDeletequestionnaireDestroyResponse,
  QuestionnairebuilderGetquestionnairesRetrieveResponse,
  QuestionnairebuilderGetquestionsRetrieveResponse,
  QuestionnairebuilderGetvideosCreateData,
  QuestionnairebuilderGetvideosCreateResponse,
  ResetalldataCreateResponse,
  RestRestCheckRetrieveResponse,
  SeeddataCreateResponse,
  UsersListData,
  UsersListResponse,
  UsersCreateData,
  UsersCreateResponse,
  UsersRetrieveData,
  UsersRetrieveResponse,
  UsersUpdateData,
  UsersUpdateResponse,
  UsersPartialUpdateData,
  UsersPartialUpdateResponse,
  UsersDestroyData,
  UsersDestroyResponse,
  UsersLoginCreateData,
  UsersLoginCreateResponse,
  VideomanagementCreatevideoCreateData,
  VideomanagementCreatevideoCreateResponse,
  VideomanagementDeletevideoDestroyData,
  VideomanagementDeletevideoDestroyResponse,
  VideomanagementGetvideosCreateData,
  VideomanagementGetvideosCreateResponse,
} from "./types.gen";

export class ApiService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Logout
   * @throws ApiError
   */
  public static apiLogoutCreate(
    data: ApiLogoutCreateData = {},
  ): CancelablePromise<ApiLogoutCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/api/logout/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}

export class ApikeysService {
  /**
   * List all API keys
   * @returns APIKey
   * @throws ApiError
   */
  public static apikeysRetrieve(): CancelablePromise<ApikeysRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/apikeys/",
    });
  }

  /**
   * Create a new API key
   * @param data The data for the request.
   * @param data.requestBody
   * @returns APIKey
   * @throws ApiError
   */
  public static apikeysCreate(
    data: ApikeysCreateData,
  ): CancelablePromise<ApikeysCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/apikeys/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Toggle API key active status
   * @param data The data for the request.
   * @param data.requestBody
   * @returns APIKey
   * @throws ApiError
   */
  public static apikeysPartialUpdate(
    data: ApikeysPartialUpdateData = {},
  ): CancelablePromise<ApikeysPartialUpdateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/apikeys/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Delete an API key
   * @returns void No response body
   * @throws ApiError
   */
  public static apikeysDestroy(): CancelablePromise<ApikeysDestroyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/apikeys/",
    });
  }

  /**
   * List all API keys
   * @param data The data for the request.
   * @param data.keyId
   * @returns APIKey
   * @throws ApiError
   */
  public static apikeysRetrieve2(
    data: ApikeysRetrieve2Data,
  ): CancelablePromise<ApikeysRetrieve2Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/apikeys/{key_id}/",
      path: {
        key_id: data.keyId,
      },
    });
  }

  /**
   * Create a new API key
   * @param data The data for the request.
   * @param data.keyId
   * @param data.requestBody
   * @returns APIKey
   * @throws ApiError
   */
  public static apikeysCreate2(
    data: ApikeysCreate2Data,
  ): CancelablePromise<ApikeysCreate2Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/apikeys/{key_id}/",
      path: {
        key_id: data.keyId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Toggle API key active status
   * @param data The data for the request.
   * @param data.keyId
   * @param data.requestBody
   * @returns APIKey
   * @throws ApiError
   */
  public static apikeysPartialUpdate2(
    data: ApikeysPartialUpdate2Data,
  ): CancelablePromise<ApikeysPartialUpdate2Response> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/apikeys/{key_id}/",
      path: {
        key_id: data.keyId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Delete an API key
   * @param data The data for the request.
   * @param data.keyId
   * @returns void No response body
   * @throws ApiError
   */
  public static apikeysDestroy2(
    data: ApikeysDestroy2Data,
  ): CancelablePromise<ApikeysDestroy2Response> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/apikeys/{key_id}/",
      path: {
        key_id: data.keyId,
      },
    });
  }
}

export class LogicbuilderService {
  /**
   * Create answer category mapping
   * Creates a mapping between an answer and a category for a questionnaire
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AnswerCategoryMapping
   * @throws ApiError
   */
  public static logicbuilderAddmappingCreate(
    data: LogicbuilderAddmappingCreateData,
  ): CancelablePromise<LogicbuilderAddmappingCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/logicbuilder/addmapping/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.answerId
   * @param data.questionnaireId
   * @returns void No response body
   * @throws ApiError
   */
  public static logicbuilderDeletemappingDestroy(
    data: LogicbuilderDeletemappingDestroyData,
  ): CancelablePromise<LogicbuilderDeletemappingDestroyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/logicbuilder/deletemapping/{questionnaire_id}/{answer_id}",
      path: {
        answer_id: data.answerId,
        questionnaire_id: data.questionnaireId,
      },
    });
  }

  /**
   * @returns unknown No response body
   * @throws ApiError
   */
  public static logicbuilderGetcategoriesRetrieve(): CancelablePromise<LogicbuilderGetcategoriesRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/logicbuilder/getcategories/",
    });
  }

  /**
   * @returns unknown No response body
   * @throws ApiError
   */
  public static logicbuilderGetquestionnairesRetrieve(): CancelablePromise<LogicbuilderGetquestionnairesRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/logicbuilder/getquestionnaires/",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.questionnaireId
   * @returns unknown No response body
   * @throws ApiError
   */
  public static logicbuilderGetquestionsRetrieve(
    data: LogicbuilderGetquestionsRetrieveData,
  ): CancelablePromise<LogicbuilderGetquestionsRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/logicbuilder/getquestions/{questionnaire_id}",
      path: {
        questionnaire_id: data.questionnaireId,
      },
    });
  }
}

export class PublicService {
  /**
   * Public API endpoint to get published questionnaire by title.
   * Returns questionnaire title, questions, question types, and answer choices.
   * Supports both public access and API key authentication.
   * @returns PublicQuestionnaire
   * @throws ApiError
   */
  public static publicQuestionnaireRetrieve(): CancelablePromise<PublicQuestionnaireRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/public/questionnaire/",
    });
  }
}

export class QuestionnairebuilderService {
  /**
   * Create or update question
   * Creates a new question or updates an existing one with answers
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Question
   * @throws ApiError
   */
  public static questionnairebuilderAddquestionCreate(
    data: QuestionnairebuilderAddquestionCreateData,
  ): CancelablePromise<QuestionnairebuilderAddquestionCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/questionnairebuilder/addquestion/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Create or update questionnaire
   * Creates a new questionnaire or updates an existing one with questions
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static questionnairebuilderCreatequestionnaireCreate(
    data: QuestionnairebuilderCreatequestionnaireCreateData,
  ): CancelablePromise<QuestionnairebuilderCreatequestionnaireCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/questionnairebuilder/createquestionnaire/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns void No response body
   * @throws ApiError
   */
  public static questionnairebuilderDeletequestionDestroy(
    data: QuestionnairebuilderDeletequestionDestroyData,
  ): CancelablePromise<QuestionnairebuilderDeletequestionDestroyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/questionnairebuilder/deletequestion/{id}",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns void No response body
   * @throws ApiError
   */
  public static questionnairebuilderDeletequestionnaireDestroy(
    data: QuestionnairebuilderDeletequestionnaireDestroyData,
  ): CancelablePromise<QuestionnairebuilderDeletequestionnaireDestroyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/questionnairebuilder/deletequestionnaire/{id}",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * @returns unknown No response body
   * @throws ApiError
   */
  public static questionnairebuilderGetquestionnairesRetrieve(): CancelablePromise<QuestionnairebuilderGetquestionnairesRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/questionnairebuilder/getquestionnaires/",
    });
  }

  /**
   * @returns unknown No response body
   * @throws ApiError
   */
  public static questionnairebuilderGetquestionsRetrieve(): CancelablePromise<QuestionnairebuilderGetquestionsRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/questionnairebuilder/getquestions/",
    });
  }

  /**
   * Get videos for questionnaire preview
   * Returns ranked videos based on questionnaire answers and category mappings
   * @param data The data for the request.
   * @param data.requestBody
   * @returns VideoResponse
   * @throws ApiError
   */
  public static questionnairebuilderGetvideosCreate(
    data: QuestionnairebuilderGetvideosCreateData,
  ): CancelablePromise<QuestionnairebuilderGetvideosCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/questionnairebuilder/getvideos/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}

export class ResetalldataService {
  /**
   * Reset database by clearing all data and resetting auto-increment counters
   * @returns unknown No response body
   * @throws ApiError
   */
  public static resetalldataCreate(): CancelablePromise<ResetalldataCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/resetalldata/",
    });
  }
}

export class RestService {
  /**
   * Check REST API
   * This endpoint checks if the REST API is working.
   * @returns Message
   * @throws ApiError
   */
  public static restRestCheckRetrieve(): CancelablePromise<RestRestCheckRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/rest/rest-check/",
    });
  }
}

export class SeeddataService {
  /**
   * Seed database with sample data. Throws error if database is not empty.
   * @returns unknown No response body
   * @throws ApiError
   */
  public static seeddataCreate(): CancelablePromise<SeeddataCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/seeddata/",
    });
  }
}

export class UsersService {
  /**
   * @param data The data for the request.
   * @param data.limit Number of results to return per page.
   * @param data.offset The initial index from which to return the results.
   * @returns PaginatedUserList
   * @throws ApiError
   */
  public static usersList(
    data: UsersListData = {},
  ): CancelablePromise<UsersListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/",
      query: {
        limit: data.limit,
        offset: data.offset,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User
   * @throws ApiError
   */
  public static usersCreate(
    data: UsersCreateData,
  ): CancelablePromise<UsersCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/users/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this user.
   * @returns User
   * @throws ApiError
   */
  public static usersRetrieve(
    data: UsersRetrieveData,
  ): CancelablePromise<UsersRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/{id}/",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this user.
   * @param data.requestBody
   * @returns User
   * @throws ApiError
   */
  public static usersUpdate(
    data: UsersUpdateData,
  ): CancelablePromise<UsersUpdateResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/users/{id}/",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this user.
   * @param data.requestBody
   * @returns User
   * @throws ApiError
   */
  public static usersPartialUpdate(
    data: UsersPartialUpdateData,
  ): CancelablePromise<UsersPartialUpdateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/users/{id}/",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this user.
   * @returns void No response body
   * @throws ApiError
   */
  public static usersDestroy(
    data: UsersDestroyData,
  ): CancelablePromise<UsersDestroyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/users/{id}/",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Login
   * @throws ApiError
   */
  public static usersLoginCreate(
    data: UsersLoginCreateData,
  ): CancelablePromise<UsersLoginCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/users/login/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}

export class VideomanagementService {
  /**
   * Create or update video
   * Creates a new video or updates an existing one with categories
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static videomanagementCreatevideoCreate(
    data: VideomanagementCreatevideoCreateData,
  ): CancelablePromise<VideomanagementCreatevideoCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/videomanagement/createvideo/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns void No response body
   * @throws ApiError
   */
  public static videomanagementDeletevideoDestroy(
    data: VideomanagementDeletevideoDestroyData,
  ): CancelablePromise<VideomanagementDeletevideoDestroyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/videomanagement/deletevideo/{id}",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * Search videos
   * Search videos by title, duration, or category. At least one search parameter must be provided.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns GetVideoWithCategories
   * @throws ApiError
   */
  public static videomanagementGetvideosCreate(
    data: VideomanagementGetvideosCreateData = {},
  ): CancelablePromise<VideomanagementGetvideosCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/videomanagement/getvideos/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}
